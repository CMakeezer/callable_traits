[article CallableTraits
    [quickbook 1.6]
    [id callable_traits]
        [copyright 2016 Barrett Adair]
    [authors [Adair, Barrett]]
        [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE.md or copy at
        [@http://www.boost.org/LICENSE_1_0.txt http://www.boost.org/LICENSE_1_0.txt])
    ]
    [source-mode c++]
        [last-revision $Date$]
        [lang en]
]

[/ developer: you should enable word wrap before you read further]

[template libname[][^CallableTraits]]
[template lib_namespace[][^callable_traits]]
[template namespace_scoped[][^callable_traits::]]
[template header_include_prefix[]callable_traits/]
[template invoke[][@http://en.cppreference.com/w/cpp/utility/functional/invoke [^['INVOKE]]]]
[template hana[][@https://boostorg.github.io/hana/ [^Boost.Hana]]]
[template feedback[][link callable_traits.contact feedback]]
[template unsure[][link callable_traits.contact ?]]
[template link_contact_the_author[][link callable_traits.contact contact the author]]
[template repo[][@https://github.com/badair/callable_traits GitHub]]
[template abominable_paper[][@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0172r0.html "abominable" function types]]
[template link_compatibility[][link callable_traits.compatibility Compatibility]]
[template link_compatibility_issues[][link callable_traits.compatibility.compatibility_issues Compatibility Issues]]
[template function_types_link[][@http://www.boost.org/doc/libs/1_61_0/libs/function_types/doc/html/index.html [^Boost.FunctionTypes]]]
[template function_types[][^Boost.FunctionTypes]]

[/ *** reference links ***
[template link_add_member_const[][link callable_traits.ref_add_member_const [^add_member_const]]]
[template link_add_member_cv[][link callable_traits.ref_add_member_cv [^add_member_cv]]]
[template link_add_member_lvalue_reference[][link callable_traits.ref_add_member_lvalue_reference [^add_member_lvalue_reference]]]
[template link_add_member_rvalue_reference[][link callable_traits.ref_add_member_rvalue_reference [^add_member_rvalue_reference]]]
[template link_add_varargs[][link callable_traits.ref_add_varargs [^add_varargs]]]
[template link_add_member_volatile[][link callable_traits.ref_add_member_volatile [^add_member_volatile]]]
[template link_apply_member_pointer[][link callable_traits.ref_apply_member_pointer [^apply_member_pointer]]]
[template link_apply_return[][link callable_traits.ref_apply_return [^apply_return]]]
[template link_arg_at[][link callable_traits.ref_arg_at [^arg_at]]]
[template link_args[][link callable_traits.ref_args [^args]]]
[template link_clear_args[][link callable_traits.ref_clear_args [^clear_args]]]
[template link_expand_args[][link callable_traits.ref_expand_args [^expand_args]]]
[template link_function_type[][link callable_traits.ref_function_type [^function_type]]]
[template link_has_calling_convention[][link callable_traits.ref_has_calling_convention [^has_calling_convention]]]
[template link_has_varargs[][link callable_traits.ref_has_varargs [^has_varargs]]]
[template link_has_void_return[][link callable_traits.ref_has_void_return [^has_void_return]]]
[template link_is_const_member[][link callable_traits.ref_is_const_member [^is_const_member]]]
[template link_is_cv_member[][link callable_traits.ref_is_cv_member [^is_cv_member]]]
[template link_is_lvalue_reference_member[][link callable_traits.ref_is_lvalue_reference_member [^is_lvalue_reference_member]]]
[template link_is_reference_member[][link callable_traits.ref_is_reference_member [^is_reference_member]]]
[template link_is_rvalue_reference_member[][link callable_traits.ref_is_rvalue_reference_member [^is_rvalue_reference_member]]]
[template link_has_member_qualifiers[][link callable_traits.ref_has_member_qualifiers [^has_member_qualifiers]]]
[template link_is_volatile_member[][link callable_traits.ref_is_volatile_member [^is_volatile_member]]]
[template link_qualified_function_type[][link callable_traits.ref_qualified_function_type [^qualified_function_type]]]
[template link_remove_member_const[][link callable_traits.ref_remove_member_const [^remove_member_const]]]
[template link_remove_member_cv[][link callable_traits.ref_remove_member_cv [^remove_member_cv]]]
[template link_remove_member_pointer[][link callable_traits.ref_remove_member_pointer [^remove_member_pointer]]]
[template link_remove_member_reference[][link callable_traits.ref_remove_member_reference [^remove_member_reference]]]
[template link_remove_varargs[][link callable_traits.ref_remove_varargs [^remove_varargs]]]
[template link_remove_member_volatile[][link callable_traits.ref_remove_member_volatile [^remove_member_volatile]]]
[template link_push_back_args[][link callable_traits.ref_push_back_args [^push_back_args]]]
[template link_push_front_args[][link callable_traits.ref_push_front_args [^push_front_args]]]
[template link_pop_back_args[][link callable_traits.ref_pop_back_args [^pop_back_args]]]
[template link_pop_front_args[][link callable_traits.ref_pop_front_args [^pop_front_args]]]
[template link_insert_args[][link callable_traits.ref_insert_args [^insert_args]]]
[template link_remove_args[][link callable_traits.ref_remove_args [^remove_args]]]
[template link_replace_args[][link callable_traits.ref_replace_args [^replace_args]]]
[template link_result_of[][link callable_traits.ref_result_of [^result_of]]]
]

[section:introduction Overview]

[import ../example/overview.cpp]
[overview]

[libname] is a C++11/14/17 header-only library for the inspection, synthesis, and decomposition of callable types. From `const volatile &&` to container-like manipulation of parameter lists, [libname] provides all the tools you need to rid your codebase of function type specializations. [libname] offers a comprehensive, fine-grained assortment of traits and metafunctions for building and ripping apart C++'s most complicated and obscure types with ease. [libname] fills the gaps where existing library solutions fall short, aiming to be the "complete type manipulation facility for function types" mentioned in the last section of [@http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/p0172r0.html p0172], the C++17 proposal regarding "abominable function types". [libname] currently supports GCC 4.8 and later, Clang 3.5 and later, AppleClang from XCode 6.3 and later, and Visual Studio 2015.

[libname] is header-only, and does not depend on any headers outside the standard library.

[libname] is currently hosted at [repo]. [*[libname] is not a Boost library.]

[section:prereqs Prerequisite Topics]

This documentation will be most beneficial to readers who posess a basic understanding of the following C++ features:

* [@http://en.cppreference.com/w/cpp/language/partial_specialization template specializations]
* [@http://en.cppreference.com/w/cpp/language/sfinae SFINAE]
* [invoke] rules
* function types
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_functions function pointers]
* [@http://stackoverflow.com/questions/480248/function-references function references]
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_member_functions pointers to member functions] (a.k.a. PMFs)
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_data_members pointers to data members] (a.k.a. PMDs)
* [@http://en.cppreference.com/w/cpp/language/operators#Function_call_operator the function call operator, [^operator()]]
* [@https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers universal references] and [@http://stackoverflow.com/questions/13725747/concise-explanation-of-reference-collapsing-rules-requested-1-a-a-2 reference collapsing rules]
* [@http://en.cppreference.com/w/cpp/language/member_functions#const-.2C_volatile-.2C_and_ref-qualified_member_functions cv-qualified and ref-qualified member functions]
* [abominable_paper]
* [@http://en.cppreference.com/w/cpp/language/overloaded_address taking the address of overloaded functions]
* [@http://en.cppreference.com/w/c/language/variadic C-style variadics], a.k.a. varargs
* [@https://en.wikipedia.org/wiki/X86_calling_conventions calling conventions]

[endsect][/section:prereqs]

[section:motivation Motivation]

[:[*['["Don't try to write helper code to detect PMFs/PMDs and dispatch on them -- it is an [_absolute nightmare]. PMF types are the worst types by far in the core language.]]]

-- Stephan T. Lavavej, CppCon 2015, [@https://www.youtube.com/watch?v=zt7ThwVfap0&t=11m40s "functional: What's New, And Proper Usage"]
]

Consider for a moment the class template below, which defines all [role red[*48]] template specializations necessary to account for all valid function types and member function pointer types in C++11 and C++14:

[import ./hideous_template.snippet.cpp]
[hideous_template]

Use cases for such obscure specializations are vitually nonexistent in run-of-the-mill application codebases. Even in library code, these are exceedingly rare. However, there are a handful of very specific metaprogramming scenarios that can only be solved with such template "spam". While these use cases are indeed rare, the writing and testing of these templates is incredibly tedious and time consuming. On this premise, [libname] offers a final and decisive library-level solution, so that authors of generic code will *never again* need to write these specializations, for ['any] reason.

Template specializations like those in the code snippet above ['still] do not account for function pointers, function references, function objects/lambdas, or calling conventions. [libname] goes the extra mile by accounting for all of them.

[note The upcoming ISO standard for C++17 includes a [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html change to the core language] which adds the [^noexcept] qualifier to the type system. If the author's understanding is correct, this would increase the the count of necessary template specializations to [role red[*96]] ([unsure]). Currently, C++17 `noexcept` qualifiers are not handled in [libname], because compiler vendors have not implemented support for this feature (to best of the author's knowledge). However, features to account for and manipulate `noexcept` qualifiers are planned in [libname], as soon as feature is implemented by a compiler vendor. Of course, the [libname] feature additions will be non-breaking for currently supported compiler versions.]

[endsect][/section:motivation]

[section:boost_function_types Regarding [^Boost.FunctionTypes]]

The use cases for [libname] are closely related to those of [function_types_link]. Here are some reasons why you might prefer [libname]:

# [function_types] is tightly coupled to [@http://www.boost.org/doc/libs/1_60_0/libs/mpl/doc/index.html [^Boost.MPL]] sequences, while [libname] generally takes a lower-level approach. No knowledge of MPL terminology is needed to use [libname].
# Other types in C++ receive fine-grained, low-level attention in [^Boost.TypeTraits] and [^<type_traits>]. [libname] gives callable types similar attention, without additional metaprogramming dependencies.
# [libname] aims to eliminate function type template specializations. [function_types] does not.
# [libname] targets C++11/14/17 features. [function_types] does not.
# The [function_types] interface relies heavily on tag types. [libname] does not.

[function_types] is a good tool for projects already dependent on the MPL, which must also support very old compilers. However, the [function_types] interface is unpleasant. It relies heavily on both the MPL and tag types, for problems that are more simply solved with neither. Using [function_types] requires an understanding of the library's "big picture."

[libname] borrows and extends much of the functionality found in [function_types], re-packaging it in a more accessible `type_traits`-style interface. There is nothing inherently wrong with [function_types], but an MPL sequence-based solution with no C++11/14/17 support should not be the only library option for inspecting and manipulating callable types.

[endsect][/section:boost_function_types]
[endsect][/section:introduction]

[/*********************************************************************]
[/******************* C O M P A T I B I L I T Y ***********************]
[/*********************************************************************]

[section:compatibility Compatibility]

[template full_support[][role green Yes] ]
[template partial_support[][role green Yes (basic)] ]
[template unknown_support[][role gray No/Unknown] ]
[template likely_support[][role black Untested - likely] ]
[template link_travis_ci[][@https://travis-ci.org/badair/callable_traits/builds Travis]]
[template link_appveyor_ci[][@https://ci.appveyor.com/project/badair/callable-traits Appveyor]]

[table
[ [Compiler]                  [Support]           [Continuous Integration] ]
[ [Clang 3.5+]                [[full_support]]    [[link_travis_ci]]       ]
[ [GCC 4.8+]                  [[full_support]]    [[link_travis_ci]]       ]
[ [AppleClang / XCode 6.3+]   [[full_support]]    [[link_travis_ci]]       ]
[ [MSVC / Visual Studio 2015] [[full_support]]    [[link_appveyor_ci]]     ]
]

CallableTraits has not been tested on every platform under the sun. If you find CallableTraits to work with another toolchain, [link callable_traits.contact let us know!]

[endsect][/section:compatibility]


[/*********************************************************************]
[/***************************** F A Q *********************************]
[/*********************************************************************]


[section:faq FAQ]


[section:reasons Why should I use [libname]?]

If you are not writing generic code, you shouldn't.

If you ['are] writing generic code, take a moment to skim your header files, and see if you can find code that looks like this:

    template<class Return, class First, class Second>
	class foo<Return(First, Second)> {
	    //     ^^^^^^^^^^^^^^^^^^^^^
	};

or like this...

    template<class Return, class ...Args>
	class foo<Return(Args...)> {
	    //   ^^^^^^^^^^^^^^^^
        //...
	};

or maybe something like this...
	
    template<class Return, class ...Args>
	class foo<Return(*)(Args...)> {
	    //     ^^^^^^^^^^^^^^^^^^
        //...
	};

perhaps...
	
    template<class Return, class ...Args>
	class foo<Return(&)(Args...)> {
	    //    ^^^^^^^^^^^^^^^^^^
        //...
	};
	
Does this rings a bell?

	template<class Return, class T, class ...Args>
	class foo<Return(T::*)(Args...)> {
	    //    ^^^^^^^^^^^^^^^^^^^^^
        //...
	};
	
Do you hate your job?

    template<class Return, class T, class ...Args>
    class foo<Return(T::*)(Args..., ...) const volatile && transaction_safe> {
        //    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        //...
	};

There are real reasons to write code like this, but they are few and far between. Implementers of the `<functional>` header and signal libraries have been trudging through these template tarpits for years now. With [libname], you can get rid of every line of code related to these techniques. [libname]'s mission is to rid the world of this code forever. Even if you are only specializing a simple function type like `Return(Args...)`, perhaps you will find that [libname] can help make your code more readable, more maintainable, more generic, and less error-prone.

[endsect]

[section Why does [namespace_scoped][^args] alias a [^std::tuple]?]

Boost contains a handful of excellent type containers. However, [libname] is designed to only use the standard headers, so `<tuple>` was the only option under this limitation.

[endsect]

[section Why use reference collapsing rules when adding member function ref-qualifiers?]

Although arbitrary, the reference collapsing rules are well-defined and already known to many template metaprogrammers. Anything else would be a burden to memorize.

[endsect]

[endsect]

[section:building Building the test suite]

This section contains the instructions for building and running the test cases and documentatation examples that are packaged with [libname].

[note For compilers with "basic" support in [libname], test cases for unsupported features are replaced with `int main(){}` via conditional compilation. For more information about compiler versions and supported features, refer to the [link_compatibility] section.]

[heading Dependencies]

Even though the [libname] headers do not rely on external dependencies, you'll need to install [@https://cmake.org/ CMake] version 3.0 or higher to use the test suite. For Windows users who wish to build the test suite with Visual Studio 2015 Update 2, it appears that CMake version 3.5 or higher is required. The build instructions assume that both CMake and Git executables exist in your environment PATH. 

[heading One-click scripts]
 
For convenience, one-click testing scripts for Linux and Windows are packaged with [libname], each of which must be run from the directory in which the script resides. Running one of these scripts will create a `build-xxx` subdirectory in the [libname] root directory, and perform all testing there. Even though these scripts were designed to be as generic as possible, issues may exist because they have not seen widespread use. Refer to the console instructions below if the provided testing scripts do not work for you.

First, clone the repository:

 git clone http://github.com/badair/callable_traits

* Linux (possibly OSX - untested)
  * Examples related to calling conventions are ['excluded] from these build scripts
  * script directory: `[CallableTraits root]/scripts/posix`
    * `gcc-libcstdxx.sh`
	  * compiles with the g++ version found in the PATH
	  * This is the script most likely to work out-of-the-box, since GCC 4.8 comes pre-installed on many Linux distributions
    * `clang-libcxx.sh`
	  * compiles with the clang++ executable in the PATH
	  * uses libc++ for the standard library implementation
    * `clang-libcstdxx.sh`
	  * compiles with the clang++ executable in the PATH
	  * uses libstdc++ for the standard library implementation

* Windows
  * Examples related to calling conventions are ['included] in these build scripts
  * script directory: `[CallableTraits root]\scripts\windows`
    * `MSVC-Win32-Debug.bat`
	  * compiles with MSVC 19
	  * Visual Studio 2015 must be installed in the default install directory
    * `LLVM-vs2014-Win32-Debug.bat`
	  * compiles with clang/c2
	  * Visual Studio 2015 must be installed in the default install directory
	  * This script assumes that the Windows Installer found on [@http://llvm.org/builds/ this page] was used to install LLVM, which is integrated with Visual Studio
	* `MinGW-Win32-Release.bat`
	  * compiles with a MinGW-based GCC build
	  * [*requires a [@http://gnuwin32.sourceforge.net/packages/make.htm Windows build of GNU Make] to be installed and present in the PATH]
	  * Expects to find the MinGW root directory at `C:\\MinGW*`
	  

[heading Console instructions - Linux/OSX]

Open a shell and enter the following commands:

```
git clone http://github.com/badair/callable_traits
cd callable_traits
mkdir build
cd build
cmake .. -DCMAKE_CXX_COMPILER=/path/to/compiler
make check
```

[heading Console instructions - Windows]

Cygwin and MSYS users should refer to the Linux section (you know who you are).

Fire up `cmd.exe` and enter the following commands:

[note These commands assume that Visual Studio 2015 was installed in the default directory. git and CMake executables are expected to be present in the evironment PATH. A 64 bit Windows install is assumed.]

```
git clone http://github.com/badair/callable_traits
cd callable_traits
mkdir build
cd build
cmake .. -G"Visual Studio 14 2015"
"%ProgramFiles(x86)%\MSBuild\14.0\Bin\MSBuild.exe" check.vcxproj /t:build /p:Configuration=Debug /p:Platform=Win32 /v:n /nologo
```

To include the experimental examples for calling conventions in the build, append `-DCALLABLE_TRAITS_BUILD_EXPERIMENTAL=ON` to the CMake arguments. To build with Clang/C2 instead of MSVC, append `-TLLVM-vs2014` to the CMake arguments. This will only work if you have [@http://llvm.org/builds/ Clang/C2] installed.

[tip If you need additional help building the test suite, [link_contact_the_author].]

[note Boost.Build configuration files have not yet been written for building the tests and examples. The `Boost.Build` configuration files are currently only used by the author to build this documentation (along with some unpublished scripting hacks).]

[endsect][/section:building]

[import ../include/callable_traits/add_member_const.hpp]
[add_member_const_hpp]

[import ../include/callable_traits/add_member_cv.hpp]
[add_member_cv_hpp]

[import ../include/callable_traits/add_member_lvalue_reference.hpp]
[add_member_lvalue_reference_hpp]

[import ../include/callable_traits/add_member_rvalue_reference.hpp]
[add_member_rvalue_reference_hpp]

[import ../include/callable_traits/add_member_volatile.hpp]
[add_member_volatile_hpp]

[import ../include/callable_traits/add_transaction_safe.hpp]
[add_transaction_safe_hpp]

[import ../include/callable_traits/add_varargs.hpp]
[add_varargs_hpp]

[import ../include/callable_traits/apply_member_pointer.hpp]
[apply_member_pointer_hpp]

[import ../include/callable_traits/apply_return.hpp]
[apply_return_hpp]

[import ../include/callable_traits/arg_at.hpp]
[arg_at_hpp]	

[import ../include/callable_traits/args.hpp]
[args_hpp]

[import ../include/callable_traits/clear_args.hpp]
[clear_args_hpp]

[import ../include/callable_traits/expand_args.hpp]
[expand_args_hpp]

[import ../include/callable_traits/expand_args_left.hpp]
[expand_args_left_hpp]

[import ../include/callable_traits/expand_args_right.hpp]
[expand_args_right_hpp]

[import ../include/callable_traits/function_type.hpp]
[function_type_hpp]

[section:ref_insert_args insert_args]

    namespace ``[lib_namespace]`` {
	
	    template<std::size_t InsertIndex, typename T, typename... NewArgs>
        using insert_args = /* implementation-defined */ ;
	}
	
[heading Constraints]
* `T` must be a [link_signature]

[heading Behavior]
* `insert_args<Index, T, NewArgs...>` aliases a type identical to `T`, except that `NewArgs...` will be inserted into the [Args] parameter list at the 0-based `InsertIndex`. TODO document out-of-bounds behavior
* [VarArgs] remain if present in `T`.

[heading Example]
[import ../example/insert_args.cpp]
[insert_args]
[endsect]

[section:ref_replace_args replace_args]

    namespace ``[lib_namespace]`` {
	
	    template<std::size_t StartIndex, typename T, typename... NewArgs>
        using replace_args = /* implementation-defined */ ;
	}
	
[heading Constraints]
* `T` must be a [link_signature]

[heading Behavior]
* `replace_args<Index, T, NewArgs...>` aliases a type identical to `T`, except that `NewArgs...` will begin overwriting the [Args] parameter list at the 0-based `InsertIndex`, extending the parameter list as necessary.
* [VarArgs] remain if present in `T`.

[heading Example]
[import ../example/replace_args.cpp]
[replace_args]
[endsect]

[section:ref_remove_args remove_args]

    namespace ``[lib_namespace]`` {
	
	    template<std::size_t StartIndex, typename T, std::size_t Count = 1>
		using remove_args = /* implementation-defined */ ;
	}
	
[heading Constraints]
* `T` must be a [link_signature]

[heading Behavior]
* `remove_args<Index, Callable, Count>` aliases a type identical to `T`, except that all parameter types in the parameter list will be removed from 0-based `Index` to `Index + Count`. TODO document out-of-bounds behavior
* [VarArgs] remain if present in `T`.

[heading Example]
[import ../example/remove_args.cpp]
[remove_args]
[endsect]

[section:ref_has_varargs has_varargs]

    namespace ``[lib_namespace]`` {
	
	    template<typename T>
		inline constexpr auto has_varargs() {
			/* implementation-defined */
		}
		
		template<typename U>
		inline constexpr auto has_varargs(U&&) {
			return has_varargs<U&&>();
		}
	}
	
[heading Constraints]
* `T` must be a [link_simple_callable]

[heading Behavior]
* If the constraints are violated, a substitution failure occurs
* Otherwise, if `T` is a [link_signature], then:
  * If `T` uses C-style variadics, an instance of `std::true_type` is returned
  * Otherwise, an instance of `std::false_type` is returned
* Otherwise, if `T` is a [link_simple_fn_obj], then:
  * If `decltype(&std::decay_t<T>::operator())` uses C-style variadics, then an instance of `std::true_type` is returned
  * Otherwise, an instance of `std::false_type` is returned
* Otherwise, an instance of `std::false_type` is returned
  
[heading Example]
[/import ../example/has_varargs.cpp]
[has_varargs]

[/[heading See Also]
* [link_add_varargs]
* [link_remove_varargs]]

[endsect]

[section:ref_has_void_return has_void_return]
TODO
[heading Example]
[/import ../example/has_void_return.cpp]
[has_void_return]
[endsect]

[section:ref_is_const_member is_const_member]
TODO
[heading Example]
[/import ../example/is_const_member.cpp]
[is_const_member]
[endsect]

[section:ref_is_cv_member is_cv_member]
TODO
[heading Example]
[/import ../example/is_cv_member.cpp]
[is_cv_member]
[endsect]

[section:ref_is_lvalue_reference_member is_lvalue_reference_member]
TODO
[heading Example]
[/import ../example/is_lvalue_reference_member.cpp]
[is_lvalue_reference_member]
[endsect]

[section:ref_is_reference_member is_reference_member]
TODO
[heading Example]
[/import ../example/is_reference_member.cpp]
[is_reference_member]
[endsect]

[section:ref_is_rvalue_reference_member is_rvalue_reference_member]
TODO
[heading Example]
[/import ../example/is_rvalue_reference_member.cpp]
[is_rvalue_reference_member]
[endsect]

[section:ref_has_member_qualifiers has_member_qualifiers]
TODO
[heading Example]
[/import ../example/has_member_qualifiers.cpp]
[has_member_qualifiers]
[endsect]

[section:ref_is_volatile_member is_volatile_member]
TODO
[heading Example]
[/import ../example/is_volatile_member.cpp]
[is_volatile_member]
[endsect]

[section:ref_remove_member_const remove_member_const]
TODO
[heading Example]
[/import ../example/remove_member_const.cpp]
[remove_member_const]
[endsect]

[section:ref_remove_member_cv remove_member_cv]
TODO
[heading Example]
[/import ../example/remove_member_cv.cpp]
[remove_member_cv]
[endsect]

[section:ref_remove_member_pointer remove_member_pointer]
TODO
[heading Example]
[import ../example/remove_member_pointer.cpp]
[remove_member_pointer]
[endsect]

[section:ref_remove_member_reference remove_member_reference]
TODO
[heading Example]
[/import ../example/remove_member_reference.cpp]
[remove_member_reference]
[endsect]

[section:ref_remove_varargs remove_varargs]
TODO
[heading Example]
[/import ../example/remove_varargs.cpp]
[remove_varargs]
[endsect]

[section:ref_remove_member_volatile remove_member_volatile]
TODO
[heading Example]
[/import ../example/remove_member_volatile.cpp]
[remove_member_volatile]
[endsect]

[section:ref_push_back_args push_back_args]

    namespace ``[lib_namespace]`` {

		template<typename T, typename... NewArgs>
		using push_back_args = /* implementation-defined */;
	}
	
[heading Constraints]
* `T` must be a [link_signature]

[heading Behavior]
* `push_back_args<T, NewArgs...>` aliases a type identical to `T`, except that `NewArgs...` have been appended to the back of `T`'s parameter list [Args].
* [VarArgs] remain if present in `T`.
	
[heading Example]
[import ../example/push_back_args.cpp]
[push_back_args]
[endsect]

[section:ref_push_front_args push_front_args]

    namespace ``[lib_namespace]`` {

		template<typename T, typename... NewArgs>
		using push_front_args = /* implementation-defined */;
	}
	
[heading Constraints]
* `T` must be a [link_signature]

[heading Behavior]
* `push_back_args<T, NewArgs...>` aliases a type identical to `T`, except that `NewArgs...` have been appended to the front of `T`'s parameter list [Args].
* [VarArgs] remain if present in `T`.

[heading Example]
[import ../example/push_front_args.cpp]
[push_front_args]
[endsect]

[section:ref_pop_back_args pop_back_args]
TODO
[heading Example]
[import ../example/pop_back_args.cpp]
[pop_back_args]
[endsect]

[section:ref_push_front_args pop_front_args]
TODO
[heading Example]
[import ../example/pop_front_args.cpp]
[pop_front_args]
[endsect]

[section:ref_result_of result_of]
TODO
[heading Example]
[import ../example/result_of.cpp]
[result_of]
[endsect]

[include interface_example.qbk]

[/*********************************************************************]
[/************************* C O N T A C T *****************************]
[/*********************************************************************]

[section:contact Contact]

[libname] is authored and maintained by Barrett Adair

Comments, feedback, bug reports, and questions are appreciated, which can be submitted in the following ways:

# Open a new issue [@https://github.com/badair/callable_traits/issues/new here] on GitHub
# Message the author [@https://gitter.im/badair/callable_traits here] on Gitter, an excellent chat service built around GitHub, with message persistence and Markdown support
# Send the author an email at
  * barrettellisadair
  * at...
  * gmail dot com
  * (please excuse the anti-spam formatting)

[endsect][/section:contact]
