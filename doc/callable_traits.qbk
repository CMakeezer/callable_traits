[article CallableTraits
    [quickbook 1.6]
    [id callable_traits]
        [copyright 2016 Barrett Adair]
    [authors [Adair, Barrett]]
        [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE.md or copy at
        [@http://www.boost.org/LICENSE_1_0.txt http://www.boost.org/LICENSE_1_0.txt])
    ]
    [source-mode c++]
        [last-revision $Date$]
        [lang en]
]

[/ developer: you should enable word wrap before you read further]

[template libname[][^CallableTraits]]
[template lib_namespace[][^callable_traits]]
[template namespace_scoped[][^boost::callable_traits::]]
[template header_include_prefix[]callable_traits/]
[template invoke[][@http://en.cppreference.com/w/cpp/utility/functional/invoke [^['INVOKE]]]]
[template hana[][@https://boostorg.github.io/hana/ [^Boost.Hana]]]
[template feedback[][link callable_traits.contact feedback]]
[template unsure[][link callable_traits.contact ?]]
[template link_contact_the_author[][link callable_traits.contact contact me]]
[template repo[][@https://github.com/badair/callable_traits GitHub]]
[template abominable_paper[][@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0172r0.html "abominable" function types]]
[template link_compatibility[][link callable_traits.compatibility Compatibility]]
[template link_compatibility_issues[][link callable_traits.compatibility.compatibility_issues Compatibility Issues]]
[template function_types_link[][@http://www.boost.org/doc/libs/1_61_0/libs/function_types/doc/html/index.html [^Boost.FunctionTypes]]]
[template function_types[][^Boost.FunctionTypes]]

[/ *** reference links ***
[template link_add_member_const[][link callable_traits.ref_add_member_const [^add_member_const]]]
[template link_add_member_cv[][link callable_traits.ref_add_member_cv [^add_member_cv]]]
[template link_add_member_lvalue_reference[][link callable_traits.ref_add_member_lvalue_reference [^add_member_lvalue_reference]]]
[template link_add_member_rvalue_reference[][link callable_traits.ref_add_member_rvalue_reference [^add_member_rvalue_reference]]]
[template link_add_varargs[][link callable_traits.ref_add_varargs [^add_varargs]]]
[template link_add_member_volatile[][link callable_traits.ref_add_member_volatile [^add_member_volatile]]]
[template link_apply_member_pointer[][link callable_traits.ref_apply_member_pointer [^apply_member_pointer]]]
[template link_apply_return[][link callable_traits.ref_apply_return [^apply_return]]]
[template link_arg_at[][link callable_traits.ref_arg_at [^arg_at]]]
[template link_args[][link callable_traits.ref_args [^args]]]
[template link_clear_args[][link callable_traits.ref_clear_args [^clear_args]]]
[template link_expand_args[][link callable_traits.ref_expand_args [^expand_args]]]
[template link_function_type[][link callable_traits.ref_function_type [^function_type]]]
[template link_has_calling_convention[][link callable_traits.ref_has_calling_convention [^has_calling_convention]]]
[template link_has_varargs[][link callable_traits.ref_has_varargs [^has_varargs]]]
[template link_has_void_return[][link callable_traits.ref_has_void_return [^has_void_return]]]
[template link_is_const_member[][link callable_traits.ref_is_const_member [^is_const_member]]]
[template link_is_cv_member[][link callable_traits.ref_is_cv_member [^is_cv_member]]]
[template link_is_lvalue_reference_member[][link callable_traits.ref_is_lvalue_reference_member [^is_lvalue_reference_member]]]
[template link_is_reference_member[][link callable_traits.ref_is_reference_member [^is_reference_member]]]
[template link_is_rvalue_reference_member[][link callable_traits.ref_is_rvalue_reference_member [^is_rvalue_reference_member]]]
[template link_has_member_qualifiers[][link callable_traits.ref_has_member_qualifiers [^has_member_qualifiers]]]
[template link_is_volatile_member[][link callable_traits.ref_is_volatile_member [^is_volatile_member]]]
[template link_qualified_function_type[][link callable_traits.ref_qualified_function_type [^qualified_function_type]]]
[template link_remove_member_const[][link callable_traits.ref_remove_member_const [^remove_member_const]]]
[template link_remove_member_cv[][link callable_traits.ref_remove_member_cv [^remove_member_cv]]]
[template link_remove_member_reference[][link callable_traits.ref_remove_member_reference [^remove_member_reference]]]
[template link_remove_varargs[][link callable_traits.ref_remove_varargs [^remove_varargs]]]
[template link_remove_member_volatile[][link callable_traits.ref_remove_member_volatile [^remove_member_volatile]]]
[template link_push_front_args[][link callable_traits.ref_push_front_args [^push_front_args]]]
[template link_pop_front_args[][link callable_traits.ref_pop_front_args [^pop_front_args]]]
[template link_return_type[][link callable_traits.ref_return_type [^return_type]]]
]

[section:introduction Overview]

[libname] is a C++11 header-only library for the inspection, synthesis, and decomposition of callable types. [libname] aims to be the "complete type manipulation facility for function types" mentioned in the final paragraph of C++17 proposal [@http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2015/p0172r0.html p0172], and removes the need for template specializations for different function signatures.

[import ../example/intro.cpp]
[intro]

[section:motivation Motivation]

[:[*['["Don't try to write helper code to detect PMFs/PMDs and dispatch on them -- it is an [_absolute nightmare]. PMF types are the worst types by far in the core language.]]]

-- Stephan T. Lavavej, CppCon 2015, [@https://www.youtube.com/watch?v=zt7ThwVfap0&t=11m40s "functional: What's New, And Proper Usage"]
]

Consider for a moment the code below, which defines all 24 template specializations necessary to account for all the function types in C++11:

[import ./hideous_template.snippet.cpp]
[hideous_template]

Things get even more complicated with member function pointers, function pointers, function references, function objects, and `transaction_safe`/`noexcept`.

Granted, use cases for such obscure specializations are vitually nonexistent in run-of-the-mill application codebases. Even in library code, these are exceedingly rare. However, there are a handful of very specific metaprogramming scenarios that can only be solved with this kind of template "spam". Writing and testing these templates is tedious and time consuming, and often requires lots of code duplication.

[libname] offers a final and decisive library-level solution to this problem, and removes the need for these specializations entirely (except for platform-specific calling conventions).

[endsect][/section:motivation]

[section:boost_function_types Regarding [^Boost.FunctionTypes]]

The use cases for [libname] overlap significantly with those of [function_types_link]. Here are some reasons why you might prefer [libname] over the latter:

# [function_types] is tightly coupled to [@http://www.boost.org/doc/libs/1_60_0/libs/mpl/doc/index.html [^Boost.MPL]] sequences, while [libname] generally takes a lower-level approach. No knowledge of MPL terminology is needed to use [libname].
# Other types in C++ receive fine-grained, low-level attention in [^Boost.TypeTraits] and [^<type_traits>]. [libname] gives callable types similar attention, without additional metaprogramming dependencies.
# [libname] aims to eliminate function type template specializations. [function_types] does not.
# [libname] targets features from C++11 and later. [function_types] does not.
# The [function_types] interface relies heavily on tag types. [libname] does not.

[function_types] is a good tool for projects already dependent on the MPL, which must also support very old compilers. However, the [function_types] interface is unpleasant to use. It relies heavily on both the MPL and tag types, for problems that are more simply solved with neither. Using [function_types] requires an understanding of the library's "big picture."

[libname] reimplements much of the functionality found in [function_types], but offers a more accessible `type_traits`-style interface. There is nothing inherently wrong with [function_types], but an MPL sequence-based solution with no C++11 support should not be the only library option for inspecting and manipulating callable types.

[endsect][/section:boost_function_types]

[section:compatibility Compatibility]

[template link_travis_ci[][@https://travis-ci.org/badair/callable_traits/builds Travis]]
[template link_appveyor_ci[][@https://ci.appveyor.com/project/badair/callable-traits Appveyor]]

[libname] is tested on GCC 4.7.4 and later, Clang 3.5 and later, XCode 6.4 and later, and Visual Studio 2015. Continuous integration is managed on [link_appveyor_ci] for Visual Studio, and on [link_travis_ci] for everything else.

The reference documentation for each feature includes compatibility notes that may mention behavior differences between compiler versions. The compatibility claims in this documentation assume compilation with the highest available C++ version flag, such as `-std=C++0x` for older versions of GCC, or `std=C++1z` for GCC 6.

[endsect][/section:compatibility]

[endsect][/section:introduction]


[section:reference Reference Documentation]

This reference will be most beneficial to readers who posess a basic understanding of the following C++ features:

* [@http://en.cppreference.com/w/cpp/language/partial_specialization template specializations]
* [@http://en.cppreference.com/w/cpp/language/sfinae SFINAE]
* [invoke] rules
* function types
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_functions function pointers]
* [@http://stackoverflow.com/questions/480248/function-references function references]
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_member_functions pointers to member functions] (a.k.a. PMFs)
* [@http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_data_members pointers to data members] (a.k.a. PMDs)
* [@http://en.cppreference.com/w/cpp/language/operators#Function_call_operator the function call operator, [^operator()]]
* [@https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers universal references] and [@http://stackoverflow.com/questions/13725747/concise-explanation-of-reference-collapsing-rules-requested-1-a-a-2 reference collapsing rules]
* [@http://en.cppreference.com/w/cpp/language/member_functions#const-.2C_volatile-.2C_and_ref-qualified_member_functions cv-qualified and ref-qualified member functions]
* [abominable_paper]
* [@http://en.cppreference.com/w/c/language/variadic C-style variadics], a.k.a. varargs

[endsect][/section:reference]

[section:member_qualifier_features Member Qualifier Features]

[import ../../../boost/callable_traits/add_member_const.hpp]
[add_member_const_hpp]

[import ../../../boost/callable_traits/remove_member_const.hpp]
[remove_member_const_hpp]

[import ../../../boost/callable_traits/add_member_volatile.hpp]
[add_member_volatile_hpp]

[import ../../../boost/callable_traits/remove_member_volatile.hpp]
[remove_member_volatile_hpp]

[import ../../../boost/callable_traits/add_member_cv.hpp]
[add_member_cv_hpp]

[import ../../../boost/callable_traits/remove_member_cv.hpp]
[remove_member_cv_hpp]

[import ../../../boost/callable_traits/add_member_lvalue_reference.hpp]
[add_member_lvalue_reference_hpp]

[import ../../../boost/callable_traits/add_member_rvalue_reference.hpp]
[add_member_rvalue_reference_hpp]

[import ../../../boost/callable_traits/remove_member_reference.hpp]
[remove_member_reference_hpp]

[import ../../../boost/callable_traits/has_member_qualifiers.hpp]
[has_member_qualifiers_hpp]

[import ../../../boost/callable_traits/is_const_member.hpp]
[is_const_member_hpp]

[import ../../../boost/callable_traits/is_volatile_member.hpp]
[is_volatile_member_hpp]

[import ../../../boost/callable_traits/is_cv_member.hpp]
[is_cv_member_hpp]

[import ../../../boost/callable_traits/is_lvalue_reference_member.hpp]
[is_lvalue_reference_member_hpp]

[import ../../../boost/callable_traits/is_rvalue_reference_member.hpp]
[is_rvalue_reference_member_hpp]

[import ../../../boost/callable_traits/is_reference_member.hpp]
[is_reference_member_hpp]

[endsect][/section:member_qualifier_features]



[section:parameter_list_features Parameter List Features]

[import ../../../boost/callable_traits/function_type.hpp]
[function_type_hpp]

[import ../../../boost/callable_traits/args.hpp]
[args_hpp]

[import ../../../boost/callable_traits/arg_at.hpp]
[arg_at_hpp]

[import ../../../boost/callable_traits/clear_args.hpp]
[clear_args_hpp]

[import ../../../boost/callable_traits/pop_front_args.hpp]
[pop_front_args_hpp]

[import ../../../boost/callable_traits/push_front_args.hpp]
[push_front_args_hpp]

[import ../../../boost/callable_traits/expand_args.hpp]
[expand_args_hpp]

[import ../../../boost/callable_traits/expand_args_left.hpp]
[expand_args_left_hpp]

[import ../../../boost/callable_traits/expand_args_right.hpp]
[expand_args_right_hpp]

[import ../../../boost/callable_traits/add_varargs.hpp]
[add_varargs_hpp]

[import ../../../boost/callable_traits/remove_varargs.hpp]
[remove_varargs_hpp]

[import ../../../boost/callable_traits/has_varargs.hpp]
[has_varargs_hpp]

[endsect][/section:parameter_list_features]



[section:return_type_features Return Type Features]

[import ../../../boost/callable_traits/return_type.hpp]
[return_type_hpp]

[import ../../../boost/callable_traits/apply_return.hpp]
[apply_return_hpp]

[import ../../../boost/callable_traits/has_void_return.hpp]
[has_void_return_hpp]

[endsect][/section:return_type_features]



[section:member_pointer_features Member Pointer Features]

[import ../../../boost/callable_traits/apply_member_pointer.hpp]
[apply_member_pointer_hpp]

[import ../../../boost/callable_traits/parent_class_of.hpp]
[parent_class_of_hpp]

[import ../../../boost/callable_traits/qualified_parent_class_of.hpp]
[qualified_parent_class_of_hpp]

[endsect][/section:member_pointer_features]



[section:other_features Other Features]

[import ../../../boost/callable_traits/add_transaction_safe.hpp]
[add_transaction_safe_hpp]

[import ../../../boost/callable_traits/remove_transaction_safe.hpp]
[remove_transaction_safe_hpp]

[import ../../../boost/callable_traits/is_transaction_safe.hpp]
[is_transaction_safe_hpp]

[import ../../../boost/callable_traits/add_noexcept.hpp]
[add_noexcept_hpp]

[import ../../../boost/callable_traits/remove_noexcept.hpp]
[remove_noexcept_hpp]

[import ../../../boost/callable_traits/is_noexcept.hpp]
[is_noexcept_hpp]

[endsect][/section:other_features]


[/*********************************************************************]
[/***************************** F A Q *********************************]
[/*********************************************************************]

[section:faq FAQ]

[heading:reasons Why should I use [libname]?]

If you are not writing generic code, you should not use [libname].

If you ['are] writing generic code, take a moment to skim your header files, and see if you can find code that looks like this:

    template<class Return, class First, class Second>
    class foo<Return(First, Second)> {
        //     ^^^^^^^^^^^^^^^^^^^^^
    };

Or maybe something like this:
    
    template<class Return, class ...Args>
    class foo<Return(*)(Args...)> {
        //     ^^^^^^^^^^^^^^^^^^
    };
    
Or, if you are *really* unlucky, something like this:

    template<class Return, class T, class ...Args>
    class foo<Return(T::*)(Args..., ...) const volatile & noexcept> {
        //    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    };

With [libname], you can get rid of all of these template specializations (unless you deal with platform-specific calling conventions, for now). Even if you are only specializing a simple function type like `Return(Args...)`, [libname] might be useful to you. You may find that [libname] can help make your code more readable, more maintainable, more generic, and less error-prone.

[libname] is thoroughly tested on many platforms. [libname] correctly handles many corner cases that are often overlooked. The need for a proper library solution grows as more features are added to C++.

[heading: Ugh, I don't want to use Boost. It's a massive dependency.]

No problem. [libname] doesn't have any dependencies, so all you need are the CallableTraits headers.

[heading Why does [namespace_scoped][^args_t] alias a [^std::tuple] instead of X?]

Boost contains a handful of excellent type containers. However, [libname] is designed to only use the standard headers, so `<tuple>` was the only option under this limitation. It would be trivial to support other variadic containers, and I will consider doing so if there is sufficient interest.

[heading Why use reference collapsing rules when adding member function ref-qualifiers?]

Although arbitrary, the reference collapsing rules are well-defined and already known to many template metaprogrammers. Anything else would be a burden to memorize. This also parallels the metafunctions provided in `<type_traits>`.

[heading How is this a C++11 library if it uses newer features like variable templates?]

If your compiler doesn't support a certain language feature that is required by a metafunction, the implementation will either trigger a `static_assert` or a substitution failure, depending on the situation. This is explained in the "Compatibility Notes" section for each trait.

[heading Many features in this library cause a "substitution failure" when the template constraints are violated. Does this mean that I can violate the constraints in a SFINAE context, as long as there is another legal substitute?]

Yes. The SFINAE-ability of violated constraints has been tested extensively on all compilers. Achieving this required some messy code in the public header files.

[heading I see that `arg_at` is defined in terms of `arg_at_t`. Shouldn't it be the other way around?]

Alias templates are much friendlier to SFINAE. The `struct`-style metafunctions are provided only to parallel the `<type_traits>` naming conventions. The only reason you might want to use the `struct`-style metafunctions would be to force a hard error instead of SFINAE.

[heading What about calling conventions?]

I originally implemented features for these. However, these features necessitated many, many more platform-specific test cases than I was willing to write for a version 1.0 release. The code is still designed to accommodate such features, so I would consider adding them in the future if there is sufficient interest.

[endsect]

[section:building Building the test suite]

This section contains the instructions for building and running the test cases and documentatation examples that are packaged with [libname].

[note Some test cases that use language features that do not work on some supported compilers. These conflicts are "resolved" by replacing `int main(){}` with the actual test via conditional compilation.]

[heading Dependencies]

Even though the [libname] headers do not rely on external dependencies, you'll need to install [@https://cmake.org/ CMake] version 3.0 or higher to use the test suite. For Windows users who wish to build the test suite with Visual Studio 2015 Update 2, it appears that CMake version 3.5 or higher is required. The build instructions assume that both CMake and Git are executable from your environment PATH.

[heading One-click build scripts]

For convenience, one-click build scripts for Linux and Windows are packaged with [libname], each of which must be run from the directory in which the script resides. Running one of these scripts will create a `build-xxx` subdirectory in the [libname] root directory, and perform all testing there. Even though these scripts were designed to be as generic as possible, issues may exist because they have not seen widespread use. Refer to the console instructions below if the provided testing scripts do not work for you.

Use these scripts at your own risk.

First, clone the repository:

 git clone http://github.com/badair/callable_traits

* Linux (possibly OSX - untested)
  * script directory: `[CallableTraits root]/scripts/posix`
    * `gcc-libcstdxx.sh`
      * compiles with the g++ version found in the PATH
      * This is the script most likely to work out-of-the-box, since GCC 4.8 comes pre-installed on many Linux distributions
    * `clang-libcxx.sh`
      * compiles with the clang++ executable in the PATH
      * uses libc++ as the standard library implementation
    * `clang-libcstdxx.sh`
      * compiles with the clang++ executable in the PATH
      * uses libstdc++ as the standard library implementation

* Windows
  * script directory: `[CallableTraits root]\scripts\windows`
    * `MSVC-Win32-Debug.bat`
      * compiles with Visual Studio 2015, which must be installed in the default install directory
    * `LLVM-vs2014-Win32-Debug.bat`
      * compiles with clang/c2
      * Visual Studio 2015 must be installed in the default install directory
      * This script assumes that the Windows Installer found on [@http://llvm.org/builds/ this page] was used to install LLVM
    * `MinGW-Win32-Release.bat`
      * compiles with a MinGW-based GCC build
      * requires a [@http://gnuwin32.sourceforge.net/packages/make.htm Windows build of GNU Make] to be installed and present in the PATH environment variable
      * Expects to find the MinGW root directory at `C:\\MinGW`


[heading Console instructions - Linux/OSX]

Open a shell and enter the following commands:

```
git clone http://github.com/badair/callable_traits
cd callable_traits
mkdir build
cd build
cmake .. -DCMAKE_CXX_COMPILER=/path/to/compiler
make check
```

[heading Console instructions - Windows]

[note Cygwin and MSYS users should refer to the Linux section (you know who you are).]

Fire up `cmd.exe` and enter the following commands:

[note These commands assume that Visual Studio 2015 was installed in the default directory. git and CMake executables are expected to be present in the evironment PATH. A 64 bit Windows install is assumed.]

```
git clone http://github.com/badair/callable_traits
cd callable_traits
mkdir build
cd build
cmake .. -G"Visual Studio 14 2015"
"%ProgramFiles(x86)%\MSBuild\14.0\Bin\MSBuild.exe" check.vcxproj /t:build /p:Configuration=Debug /p:Platform=Win32 /v:n /nologo
```

To build with Clang/C2 instead of MSVC, append `-TLLVM-vs2014` to the CMake arguments. This will only work if you have [@http://llvm.org/builds/ Clang/C2] installed.

[tip If you need additional help building the test suite, [link_contact_the_author].]

[note Boost.Build isn't supported yet, but it will be supported soon.]

[endsect][/section:building]


[/*********************************************************************]
[/************************* C O N T A C T *****************************]
[/*********************************************************************]

[section:contact Contact]

[libname] is authored and maintained by Barrett Adair.

Comments, feedback, bug reports, and questions are appreciated, which can be submitted in the following ways:

# Open a new issue [@https://github.com/badair/callable_traits/issues/new here] on GitHub
# Message me [@https://gitter.im/badair/callable_traits here] on Gitter
# Send me an email at
  * barrettellisadair
  * at...
  * gmail dot com
  * (please excuse the anti-spam formatting)

[endsect][/section:contact]
